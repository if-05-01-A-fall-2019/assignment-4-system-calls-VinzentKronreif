System Calls Understanding

fork:
	Creates a new child process by duplicating the calling process. 
	No Arguments
	

stat:
	Display file or file system status. 
	Arguments: 
		const char *pathname: The path to the file you want the information from. 
		struct stat *statbuf: The return buffer
	Fails if the Path doesn't exist.

kill:
	The kill utility will send a signal to the process or processes specified by each pid operand.
	Arguments:
		pid_t pid: ID of the process you want to send the signal to.
		int sig: signal you want to send
	Fails if the value of the sig argument is an invalid or unsupported signal number.

mmap:
	map or unmap files or devices into memory.
	Arguments:
		void *addr: Is the starting addres for the new mapping
		site_t length: Specifies the length of the mapping (must be greater than 0)
		int prot: Describes the desired memory protection of the mapping
		int flags: determines whether updates to the mapping are visible to other processes mapping the same region, and whether updates are carried through to the underlying file.
		int fd: Is the file descriptor
		off_t offset: Is the starting offset in the file

chmod:
	Changes the file mode of files according to Mode
	Arguments:
		const char *pathname: The path to the file you want to change the mode of.
		mode_t mode: New file mode
			Modes are: -x(execute), -r(read) and -w(write)
	Fails if the value of the mode argument is not valid.

waitpid
	Waits for a child process to stop or terminate
	Arguments:
		pid_t pid: child that waitpid() waits for to change state
		int *wstatus: if not NULL: status infomration is stored in the int to which it points.


System Calls Fail

fork:
Fails if theres not enough storage available.

mount:
If you mount a tmpfs with an mpol option.

exec:
Fails when execute permission is denied for the file/script.

chmod:
Fails when the file does not exist.

read:
Fails when file descriptor is not valid or is not open for reading.

kill:
Fails if the target process or process group does not exist.


unlink:
Fails if a component of the path prefix is not a directory.

Trap

A trap istruction is a procedure call that synchronously transfer the control. It is a software interrupt generated by the user program or by an error when the operating system is needed by it to perform the system calls or an operation.